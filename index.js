// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var debug, expr, isExpr, r, regex, rewrite, walk, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  debug = require('debug')('mr');

  _ = require('underscore');

  r = require('rethinkdb');

  walk = require('traverse');

  expr = ['$date', '$between', '$in', '$nin', '$contains', '$gt', '$ge', '$lt', '$le', '$eq'];

  regex = /^\$/;

  isExpr = function(ast) {
    var keys;
    if (ast == null) {
      ast = {};
    }
    if (!_.isObject(ast)) {
      return false;
    }
    keys = _.keys(ast);
    if (keys.length !== 1) {
      return false;
    }
    if (!regex.test(keys[0])) {
      return false;
    }
    return true;
  };

  rewrite = function(ast) {
    if (ast == null) {
      ast = {};
    }
    ast = _.clone(ast);
    return walk(ast).map(function(node) {
      if (this.key === '$date') {
        return this.parent.update(new Date(node));
      }
    });
  };

  exports.match = function(ast) {
    var partial;
    if (ast == null) {
      ast = {};
    }
    ast = rewrite(ast);
    partial = _.chain(ast).pairs().map(function(_arg) {
      var left, op, value;
      left = _arg[0], value = _arg[1];
      if (isExpr(value)) {
        op = _.keys(value)[0];
        if (__indexOf.call(expr, op) < 0) {
          throw new Error("unknown expression " + key);
        }
        return {
          left: left,
          op: op,
          right: value[op]
        };
      } else {
        return {
          left: left,
          op: '$eq',
          right: value
        };
      }
    }).groupBy('op').value();
    return function(seq) {
      var $eq, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      if ((_ref = partial.$between) != null) {
        _ref.forEach(function(_arg) {
          var left, op, right;
          left = _arg.left, op = _arg.op, right = _arg.right;
          if (!_.isArray(right)) {
            throw new Error('invalid $between expr');
          }
          if (right.length !== 2) {
            throw new Error('invalid $between expr');
          }
          return seq = seq.between(right[0], right[1], {
            index: left
          });
        });
      }
      if ((_ref1 = partial.$in) != null) {
        _ref1.forEach(function(_arg) {
          var left, op, right;
          left = _arg.left, op = _arg.op, right = _arg.right;
          if (!_.isArray(right)) {
            throw new Error('invalid $in expr');
          }
          return seq = seq.filter(function(row) {
            return r.expr(right).contains(row(left));
          });
        });
      }
      if ((_ref2 = partial.$nin) != null) {
        _ref2.forEach(function(_arg) {
          var left, op, right;
          left = _arg.left, op = _arg.op, right = _arg.right;
          if (!_.isArray(right)) {
            throw new Error('invalid $in expr');
          }
          return seq = seq.filter(function(row) {
            return r.expr(right).contains(row(left)).not();
          });
        });
      }
      if ((_ref3 = partial.$contains) != null) {
        _ref3.forEach(function(_arg) {
          var left, op, right;
          left = _arg.left, op = _arg.op, right = _arg.right;
          return seq = seq.filter(function(row) {
            return row(left).contains(right);
          });
        });
      }
      if ((_ref4 = partial.$gt) != null) {
        _ref4.forEach(function(_arg) {
          var left, op, right;
          left = _arg.left, op = _arg.op, right = _arg.right;
          return seq = seq.filter(function(row) {
            return row(left).gt(right);
          });
        });
      }
      if ((_ref5 = partial.$ge) != null) {
        _ref5.forEach(function(_arg) {
          var left, op, right;
          left = _arg.left, op = _arg.op, right = _arg.right;
          return seq = seq.filter(function(row) {
            return row(left).ge(right);
          });
        });
      }
      if ((_ref6 = partial.$lt) != null) {
        _ref6.forEach(function(_arg) {
          var left, op, right;
          left = _arg.left, op = _arg.op, right = _arg.right;
          return seq = seq.filter(function(row) {
            return row(left).lt(right);
          });
        });
      }
      if ((_ref7 = partial.$le) != null) {
        _ref7.forEach(function(_arg) {
          var left, op, right;
          left = _arg.left, op = _arg.op, right = _arg.right;
          return seq = seq.filter(function(row) {
            return row(left).le(right);
          });
        });
      }
      $eq = {};
      if ((_ref8 = partial.$eq) != null) {
        _ref8.forEach(function(_arg) {
          var left, op, right;
          left = _arg.left, op = _arg.op, right = _arg.right;
          return $eq[left] = right;
        });
      }
      seq = seq.filter($eq);
      return seq;
    };
  };

  exports.aggregate = function(ast) {
    var key, keys, op;
    if (!_.isObject(ast)) {
      throw new Error('invalid aggregator');
    }
    keys = _.keys(ast);
    if (keys.length !== 1) {
      throw new Error('multiple aggregator');
    }
    op = keys[0];
    key = ast[op];
    return function(seq) {
      if (op !== '$distinct' && op !== '$sum' && op !== '$avg' && op !== '$min' && op !== '$max') {
        throw new Error("unknown aggregator " + op);
      }
      op = op.replace('$', '');
      if (op === 'distinct') {
        seq = _.result(seq.withFields(key), op);
      } else {
        seq = seq[op](key);
      }
      return seq;
    };
  };

}).call(this);
